<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>How to load and save documents in TWebBrowser in a Delphi-like way</title>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<meta http-equiv="Content-Language" content="en" />
<meta name="description" content="How to load and save documents in TWebBrowser in a Delphi-like way" />
<meta name="keywords" content="Delphi,programming,tutorial,article,interface,interfaces,COM,res://,res protocol,file://,file protocol,Internet Explorer,TWebBrowser,WebBrowser control,resource files,URL,URLs,navigate,internet,explorer,internet explorer,OleVariant,about:blank,IPersistStreamInit,IStream,TStream,TFileStream,TStringStream,TStreamAdpater,IHTMLDocument,IHTMLDocument2,IHTMLElement,IHTMLWindow" />
<meta name="copyright" content="Copyright (c) 2002-2018 Peter D Johnson" />
<meta name="robots" content="INDEX,FOLLOW" />
<link rel="canonical" href="http://www.delphidabbler.com/articles?article=14" />
<link rel="stylesheet" href="/css/main.css" />
<link rel="stylesheet" href="/css/main-multicol-scr.css" media="screen" />
<link rel="stylesheet" href="/css/main-2col-scr.css" media="screen" />
<script type="text/javascript" src="/js/core.js"></script>
<script type="text/javascript" src="/js/offsite-win.js"></script>
<link rel="stylesheet" href="/css/articles.css" />
<link rel="stylesheet" href="/css/source.css" />
<!-- Mozilla side bar -->
<link rel="alternate" href="/feeds/articles-feed" type="application/rss+xml" title="DelphiDabbler Articles RDF" />
<!-- Begin Cookie Consent plugin by Silktide - http://silktide.com/cookieconsent -->
<script type="text/javascript">
    window.cookieconsent_options = {"message":"This site uses cookies to deliver its services, to enable targeted advertising and to support various social media buttons, and to analyse traffic. By using this site, you agree to its use of cookies.","dismiss":"Got it!","learnMore":"More info","link":"http://delphidabbler.com/subsid/cookies","theme":"dark-top"};
</script>

<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/1.0.9/cookieconsent.min.js"></script>
<!-- End Cookie Consent plugin -->
</head>
<body>
<!-- Facebook script -->
<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/all.js#xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<div id="wrapper">
<div id="header">
<div class="hide-from-css">
<h1>DelphiDabbler.com</h1>
<p>Open source software, Delphi components, Tutorials &amp; more.</p>
</div> <!-- .hide-from-css -->
<div id="header-right">
<div id="quicklink" style="padding-right:4px;">
&raquo; <a href="/sitemap">Sitemap</a></div>
<div style="margin-top:8px;">
<a href="/donate" title="Please donate via PayPal to help support the site"><img src="/img/btns/donate.gif" alt="Donate with PayPal" style="width:92px;height:26px;" /></a></div>
</div>
</div> <!-- #header -->
<div id="navigation">
<hr class="hide-from-css" />
<h2 class="hide-from-css">Navigation</h2>
<ul>
<li><a href="/index">Home&nbsp;Page</a></li>
<li><a href="/programs">Programs</a></li>
<li><a href="/codelib">Delphi&nbsp;Library</a></li>
<li><a href="/snips-n-tips">Snippets&nbsp;&amp;&nbsp;Tips</a></li>
<li><a href="/articles" class="selected ">Articles</a></li>
<li><a href="http://wiki.delphidabbler.com/" class="offsite-no-glyph">Documentation</a></li>
<li><a href="/blog">Blog</a></li>
<li><a href="/news">News</a></li>
<li><a href="/contact">Contact</a></li>
<li><a href="/background">About</a></li>
</ul>
<div style="padding:4px;">
  <!-- Twitter button -->
  <div>
  <a href="https://twitter.com/share" class="twitter-share-button" data-via="delphidabbler" data-hashtags="delphi">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>
  </div>
  <!-- Google+ Share button -->
  <div class="g-plus" data-action="share" data-width="120"></div>
  <!-- Facebook Like button -->
<div class="fb-like" data-href="http://delphidabbler.com/articles.php" data-layout="button_count" data-action="like" data-show-faces="false" data-share="true"></div>
</div>

</div> <!-- #navigation -->
<div id="main">
<div id="content">
<h1>
	How to load and save documents in TWebBrowser in a Delphi-like way
</h1>

<div class="noprint">
<!-- style in following div and non-breaking spaces are a work around for a
     rendering bug in IE7 that sometimes hides preceeding h1 section if nothing
     is printed before this show_ads.js code is run.
     Tested and runs OK on Safari, Opera, Firefox, Chrome, but then, so did the
     original code! -->
<div class="centre-align" style="font-size:1pt;">&nbsp;
<script type="text/javascript"><!--
google_ad_client = "ca-pub-0907703677935617";
/* 468x60, created 11/04/09 */
google_ad_slot = "8060165044";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
&nbsp;
</div>
</div>
<h2>
  Contents
</h2>

<div class="contents">
  <ul>
    <li>
      <a href="/articles?article=14&amp;part=1#intro">Why Do It?</a>    </li>
    <li>
      <a href="/articles?article=14&amp;part=1#requirements">Requirements</a>    </li>
    <li>
      <a href="/articles?article=14&amp;part=1#implementation">Implementation</a>      <ul>
        <li>
          <a href="/articles?article=14&amp;part=1#stage1">Stage 1: Basic Implementation</a>          <ul>
            <li>
              <a href="/articles?article=14&amp;part=1#stage1-constructor">Constructor</a>            </li>
            <li>
              <a href="/articles?article=14&amp;part=1#stage1-nav">Navigation Methods</a>            </li>
            <li>
              <a href="/articles?article=14&amp;part=1#stage1-docload">Document Loading Methods</a>            </li>
            <li>
              <a href="/articles?article=14&amp;part=1#stage1-docsave">Document Saving Methods</a>            </li>
          </ul>
        </li>
        <li>
          <a href="/articles?article=14&amp;part=1#stage2">Stage 2: Adding Unicode Support</a>          <ul>
            <li>
              <a href="/articles?article=14&amp;part=1#stage2-encoding">Encoding Property</a>            </li>
            <li>
              <a href="/articles?article=14&amp;part=1#stage2-docload">Revised Document Loading Methods</a>            </li>
            <li>
              <a href="/articles?article=14&amp;part=1#stage2-docsave">Revised Document Saving Methods</a>            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      <a href="/articles?article=14&amp;part=1#conclusion">Conclusion</a>    </li>
    <li>
      <a href="/articles?article=14&amp;part=1#demo">Demo Program</a>    </li>
    <li>
      <a href="/articles?article=14&amp;part=1#acknowledgements">Acknowledgements</a>    </li>
  </ul>
</div>


<h2 id="intro">
  Why do it
</h2>

<p>
  I use the <var>TWebBrowser</var> control quite a lot. But, since the control
  is simply a wrapper round the Microsoft&reg; control, it doesn't really do
  things the &quot;Delphi way&quot;.
</p>

<p>
  If, like me, you've found yourself saving dynamically generated HTML code to
  disk just so you can access it using <var>TWebBrowser.Navigate()</var> you
  probably know what I mean. You wouldn't have to do such a thing with a
  native Delphi control such as a <var>TMemo</var> &ndash; you would simply
  access a relevant property like <var>TMemo.Lines[]</var> or use a method
  like <var>TMemo.LoadFromStream</var>. You can also do this with
  <var>TWebBrowser</var>, but its not straightforward &ndash; not very
  &quot;Delphi&quot; &ndash; you have to query and manipulate interfaces and
  all sorts of stuff. It's all so very COM!
</p>

<p>
  So, I decided to create a wrapper class for <var>TWebBrowser</var> that
  makes navigating, loading and saving a whole lot easier and more intuitive.
  This article walks through the development of that class and examines some
  of the key techniques for working with <var>TWebBrowser</var> along the way.
</p>

<p>
  A word of caution before we get started. The code I'll present here is for
  illustration purposes only. Don't expect it to be perfect for production code,
  although you should be able to use it as a basis. Please feel free to take the
  core unit from the demo and modify, specialise or generalise it for your own
  purposes. It's open source and licensed under the MPL / GLP / LGPL tri-license
  which should suit most open-source hackers.
</p>

<h2 id="requirements">
  Requirements
</h2>

<p>
  The approach we will take is to develop a wrapper class for
  <var>TWebBrowser</var> rather than derive a new class from it. Let's first
  decide of the main functions of the web browser we want to be able to access
  easily &ndash; these will be our requirements for the wrapper class. Here's
  the list I drew up:
</p>

<ul class="spaced">
  <li>
    Load HTML code into an existing document from a local file, a stream or
    a string.
  </li>

  <li>
    Navigate to a URL (as now) but without worrying about remembering the
    <code>file://</code> protocol when loading an local file and with easy
    access to HTML resources using the <code>res://</code> protocol.
  </li>

  <li>
    Programmatically save the browser's content as HTML source code. We
    should also be able to store the content in a string or write it to a stream
    or file.
  </li>

  <li>
    Provide access to the underlying <var>TWebBrowser</var> object so that we
    can use it directly to access any functionality not provided by the new
    code.
  </li>
</ul>

<p>
  Now we're living in a Unicode world the following extra requirements will be
  added:
</p>

<ul class="spaced">
  <li>
    Be able to read and write HTML code in ANSI or Unicode encodings. And be
    able to specify the encoding used when saving a document or when loading
    from a string.
  </li>
  <li>
    Get the encoding (character set) used by the browser object for the
    current document.
  </li>
</ul>

<p>
  From this list you can see we are focussing on navigating, loading and saving
  documents.
</p>


<h2 id="implementation">
  Implementation
</h2>

<p>
  Now we have our specification we will approach implementation in two stages:
</p>

<ul class="spaced">
  <li>
    <strong>Stage 1:</strong> Basic implementation of the first set of
    requirements. This code will be suitable for most Delphi compilers.
  </li>
  <li>
    <strong>Stage 2:</strong> Add on the required Unicode support. This will
    require Delphi 2009 or later.
  </li>
</ul>


<h3 id="stage1">
  Stage 1: Basic Implementation
</h3>

<p>
  This first stage won't worry about Unicode support other than that needed to
  make the code compile and work with Delphi 2009 and later.
</p>

<p>
  Here is an outline of a class that, once implemented, meets our basic
  requirements:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">type</span>
<span class="pas-space">  </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">class</span><span class="pas-sym">(</span><span class="pas-ident">TObject</span><span class="pas-sym">)</span>
<span class="pas-space">  </span><span class="pas-kwd">private</span>
<span class="pas-space">    </span><span class="pas-ident">fWebBrowser</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowser</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-comment">// wrapped control</span>
<span class="pas-space">  </span><span class="pas-kwd">protected</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">InternalLoadDocumentFromStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">InternalSaveDocumentToStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">public</span>
<span class="pas-space">    </span><span class="pas-kwd">constructor</span><span class="pas-space"> </span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowser</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">LoadFromFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">LoadFromStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">LoadFromString</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">HTML</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">NavigateToLocalFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Boolean</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">NavigateToResource</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Module</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">HMODULE</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ResName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ResType</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">nil</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">NavigateToResource</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ModuleName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ResName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ResType</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">nil</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">NavigateToURL</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">URL</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">SaveToString</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stm</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">SaveToFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">property</span><span class="pas-space"> </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowser</span><span class="pas-space"> </span><span class="pas-kwd">read</span><span class="pas-space"> </span><span class="pas-ident">fWebBrowser</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<div class="footer">Listing 1</div>
</div>

<p>
  The first thing to notice is the <var>WebBrowser</var> property that
  enables access to the wrapped control. The public methods fall naturally
  into several groups and, rather than explaining the purpose of each method
  now, we will look at them in groups. The protected &quot;helper&quot;
  methods will be discussed along with the public methods they service.
</p>


<h4 id="stage1-constructor">
  Constructor
</h4>

<p>
  The constructor is very simple &ndash; it just stores a reference to the
  <var>TWebBrowser</var> control that the object is wrapping. This control
  reference is passed as a parameter to the constructor:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">constructor</span> TWebBrowserWrapper.Create(<span class="pas-kwd">const</span> WebBrowser: TWebBrowser);
<span class="pas-kwd">begin</span>
  <span class="pas-kwd">inherited</span> Create;
  fWebBrowser := WebBrowser;
<span class="pas-kwd">end</span>;</pre>
<div class="footer">Listing 2</div>
</div>


<h4 id="stage1-nav">
  Navigation Methods
</h4>

<p>
  We have declared three different methods for navigation:
</p>

<ul class="spaced">
  <li>
    <var>NavigateToURL</var> &ndash; A thin wrapper around the existing
    <var>TWebBrowser.Navigate</var> method that only deals with standard
    URLs and intelligently sets the cache and history flags. The main
    difference between this method and the underlying control's method is
    that our method blocks until the required document has completely
    downloaded.
  </li>

  <li>
    <var>NavigateToLocalFile</var> &ndash; This convenience method simply
    adds the required <code>file://</code> protocol to the URL before
    calling <var>NavigateToURL</var>.
  </li>

  <li>
    <var>NavigateToResource</var> &ndash; Loads HTML code from the
    program's (or other module's) resources into the browser. Overloaded
    versions of this method allow resources to be accessed by instance
    handle (like the <var>TResourceStream</var> constructors) or by
    providing the name of the module containing the resources.
  </li>
</ul>

<p>
  <var>NavigateToLocalFile</var> and both versions of
  <var>NavigateToResource</var> work by creating the required URL from the
  parameters passed to them and then calling <var>NavigateToURL</var> to do
  the actual navigation. Let's first look at how <var>NavigateToURL</var>
  handles the navigation then come back to look at how the other routines put
  the URLs together.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">NavigateToURL</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">URL</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-comment">// ---------------------------------------------------------------------------</span>
<span class="pas-space">  </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">Pause</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ADelay</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Cardinal</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">var</span>
<span class="pas-space">    </span><span class="pas-ident">StartTC</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Cardinal</span><span class="pas-sym">;</span><span class="pas-space">  </span><span class="pas-comment">// tick count when routine called</span>
<span class="pas-space">  </span><span class="pas-kwd">begin</span>
<span class="pas-space">    </span><span class="pas-ident">StartTC</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Windows</span><span class="pas-sym">.</span><span class="pas-ident">GetTickCount</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">repeat</span>
<span class="pas-space">      </span><span class="pas-ident">Application</span><span class="pas-sym">.</span><span class="pas-ident">ProcessMessages</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">until</span><span class="pas-space"> </span><span class="pas-ident">Int64</span><span class="pas-sym">(</span><span class="pas-ident">Windows</span><span class="pas-sym">.</span><span class="pas-ident">GetTickCount</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-ident">Int64</span><span class="pas-sym">(</span><span class="pas-ident">StartTC</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">&gt;=</span><span class="pas-space"> </span><span class="pas-ident">ADelay</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-comment">// ---------------------------------------------------------------------------</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">Flags</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">OleVariant</span><span class="pas-sym">;</span><span class="pas-space">  </span><span class="pas-comment">// flags that determine action</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-comment">// Don't record in history</span>
<span class="pas-space">  </span><span class="pas-ident">Flags</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">navNoHistory</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">AnsiStartsText</span><span class="pas-sym">(</span><span class="pas-str">'res://'</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">URL</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-ident">AnsiStartsText</span><span class="pas-sym">(</span><span class="pas-str">'file://'</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">URL</span><span class="pas-sym">)</span>
<span class="pas-space">    </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-ident">AnsiStartsText</span><span class="pas-sym">(</span><span class="pas-str">'about:'</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">URL</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-ident">AnsiStartsText</span><span class="pas-sym">(</span><span class="pas-str">'javascript:'</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">URL</span><span class="pas-sym">)</span>
<span class="pas-space">    </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-ident">AnsiStartsText</span><span class="pas-sym">(</span><span class="pas-str">'mailto:'</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">URL</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">    </span><span class="pas-comment">// don't use cache for local files</span>
<span class="pas-space">    </span><span class="pas-ident">Flags</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Flags</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-ident">navNoReadFromCache</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-ident">navNoWriteToCache</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-comment">// Do the navigation and wait for it to complete</span>
<span class="pas-space">  </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">.</span><span class="pas-ident">Navigate</span><span class="pas-sym">(</span><span class="pas-ident">URL</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Flags</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">while</span><span class="pas-space"> </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">.</span><span class="pas-ident">ReadyState</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-ident">READYSTATE_COMPLETE</span><span class="pas-space"> </span><span class="pas-kwd">do</span>
<span class="pas-space">    </span><span class="pas-ident">Pause</span><span class="pas-sym">(</span><span class="pas-num">5</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<div class="footer">Listing 3</div>
</div>

<p>
  This method essentially falls into two parts. Firstly we decide whether to
  use the browser's cache to access the document. The decision is based on
  whether the document is stored locally or is on the internet. We simply
  check the start of the URL string for some known local protocols etc. and
  don't use the cache if the URL conforms to one of these types. It would be
  a simple matter to adapt the method by adding a default parameter to let
  the user of the code specify what if any caching should take place (this is
  left as an exercise). The final part of the routine simply uses the browser
  object's <var>Navigate()</var> method to load the resource into the
  document. We then go into a loop and wait for the document to load
  completely. The local <var>Pause</var> procedure does a busy wait, polling the
  message queue for about 5ms at a time.
</p>

<p>
  Now let us review the specialised navigation methods. The simplest of these
  is the <var>NagivateToLocalFile</var> method. This method simply checks if
  the file exists and, if so, prefixes the given file name with the
  <code>file://</code> protocol then calls <var>NavigateToURL</var>. If the
  file doesn't exist no action is taken. A boolean value indicating whether the
  file exists is returned. You may prefer to modify the method to raise an
  exception when the file does not exist.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">function</span> TWebBrowserWrapper.NavigateToLocalFile(
  <span class="pas-kwd">const</span> FileName: <span class="pas-kwd">string</span>): Boolean;
<span class="pas-kwd">begin</span>
  Result := FileExists(FileName);
  <span class="pas-kwd">if</span> Result <span class="pas-kwd">then</span>
    NavigateToURL(<span class="pas-str">'file://'</span> + FileName)
<span class="pas-kwd">end</span>;</pre>
<div class="footer">Listing 4</div>
</div>

<p>
  <var>NavigateToResource</var> is slightly more complicated in that we need
  to create the required URL using the IE specific <code>res://</code>
  protocol URL. We discussed this protocol in <a href="/articles?article=10">article #10</a> where we also developed some functions to return <code>res://</code>
  formatted URLs. (We will re-use these functions later).
</p>

<p>
  Two overloaded methods are provided. Both methods create the required URL for
  a given module, resource name and an optional resource type. They then call
  <var>NavigateToURL</var> to do the actual navigation. The overloaded methods
  vary in the way the module is described. The first method accepts the handle
  of a loaded module (pass <var>HInstance</var> to access the current program).
  The second method is simply passed a module name as a string. If the resource
  type parameter is omitted then it is left out of the URL &ndash; the
  <code>res://</code> protocol simply defaults to expecting an
  <var>RT_HTML</var> (=<var>MakeIntResource(23)</var>) resource in such cases.
  Here are the methods:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">procedure</span> TWebBrowserWrapper.NavigateToResource(<span class="pas-kwd">const</span> Module: HMODULE;
  <span class="pas-kwd">const</span> ResName, ResType: PChar);
<span class="pas-kwd">begin</span>
  NavigateToURL(MakeResourceURL(Module, ResName, ResType));
<span class="pas-kwd">end</span>;

<span class="pas-kwd">procedure</span> TWebBrowserWrapper.NavigateToResource(<span class="pas-kwd">const</span> ModuleName: <span class="pas-kwd">string</span>;
  <span class="pas-kwd">const</span> ResName, ResType: PChar);
<span class="pas-kwd">begin</span>
  NavigateToURL(MakeResourceURL(ModuleName, ResName, ResType));
<span class="pas-kwd">end</span>;</pre>
<div class="footer">Listing 5</div>
</div>

<div class="boxout">
  The <var>MakeResourceURL</var> functions are included in the demo source code
  that accompanies this article.
</div>

<p>
  As can be seen, the methods simply rely on overloaded versions of the
  <var>MakeResourceURL</var> function. The implementation of these functions
  is <a href="/articles?article=10#generate-buildurl">described in article #10</a>. In both cases we could improve the methods by checking that the required
  resources exist and raising an exception or returning false if not. This is
  left as an exercise (<em>hint:</em> use the Windows <var>FindResource</var>
  function to check for the resource's existence).
</p>


<h4 id="stage1-docload">
  Document Loading Methods
</h4>

<p>
  There are three methods that load new content into an existing document:
</p>

<ul class="spaced">
  <li>
    <var>LoadFromString</var> &ndash; Replaces the current document with
    the HTML code stored in a string.
  </li>

  <li>
    <var>LoadFromFile</var> &ndash; Replaces the current document with the
    HTML code read from a file.
  </li>

  <li>
    <var>LoadFromStream</var> &ndash; Replaces the current document with
    the HTML code read from a stream.
  </li>
</ul>

<p>
  At first sight <var>LoadFromFile</var> is similar to
  <var>NavigateToLocalFile</var>, but <var>NavigateToLocalFile</var> reads
  a file into the browser, creating a new document whereas
  <var>LoadFromFile</var> requires that a document already exists and
  replaces it's HTML code &ndash; i.e. the HTML is changed dynamically.
</p>

<p>
  Both <var>LoadFromString</var> and <var>LoadFromFile</var> simply
  create a suitable stream and call <var>LoadFromStream</var>, which in turn
  uses the protected <var>InternalLoadDocumentFromStream</var> method to
  perform the actual loading of the code. Let's first look at the stream and
  string methods, which are very similar:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">procedure</span> TWebBrowserWrapper.LoadFromFile(<span class="pas-kwd">const</span> FileName: <span class="pas-kwd">string</span>);
<span class="pas-kwd">var</span>
  FileStream: TFileStream;
<span class="pas-kwd">begin</span>
  FileStream := TFileStream.Create(
    FileName, fmOpenRead <span class="pas-kwd">or</span> fmShareDenyNone
  );
  <span class="pas-kwd">try</span>
    LoadFromStream(FileStream);
  <span class="pas-kwd">finally</span>
    FileStream.Free;
  <span class="pas-kwd">end</span>;
<span class="pas-kwd">end</span>;

<span class="pas-kwd">procedure</span> TWebBrowserWrapper.LoadFromString(<span class="pas-kwd">const</span> HTML: <span class="pas-kwd">string</span>);
<span class="pas-kwd">var</span>
  StringStream: TStringStream;
<span class="pas-kwd">begin</span>
  StringStream := TStringStream.Create(HTML);
  <span class="pas-kwd">try</span>
    LoadFromStream(StringStream);
  <span class="pas-kwd">finally</span>
    StringStream.Free;
  <span class="pas-kwd">end</span>;
<span class="pas-kwd">end</span>;</pre>
<div class="footer">Listing 6</div>
</div>

<p>
  As can be seen this is all quite straightforward if you're used to using
  <var>TStream</var>s. <var>LoadFromFile</var> opens a read-only
  <var>TFileStream</var> onto the file and passes the stream to
  <var>LoadFromStream</var>. Similarly <var>LoadFromString</var> uses the
  very useful <var>TStringStream</var> class to open a stream that can read
  the HTML code string.
</p>

<p>
  <var>LoadFromStream</var> itself is quite straightforward because it hands
  most of its work off to <var>InternalLoadFromStream</var>:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">procedure</span> TWebBrowserWrapper.LoadFromStream(<span class="pas-kwd">const</span> Stream: TStream);
<span class="pas-kwd">begin</span>
  NavigateToURL(<span class="pas-str">'about:blank'</span>);
  InternalLoadDocumentFromStream(Stream);
<span class="pas-kwd">end</span>;</pre>
<div class="footer">Listing 7</div>
</div>

<p>
  The main thing to note here is that we must ensure there is a document
  present in <var>TWebBrowser</var> since, as we will see in a moment, we need
  it in order to load the code from the stream. We do this by navigating to
  the special <code>about:blank</code> document, which simply creates a blank
  document in the web browser control. Once we have our blank document we load
  the stream into it using <var>InternalLoadDocumentFromStream</var>, which
  is defined below:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">InternalLoadDocumentFromStream</span><span class="pas-sym">(</span>
<span class="pas-space">  </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">PersistStreamInit</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">IPersistStreamInit</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">StreamAdapter</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">IStream</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">Assigned</span><span class="pas-sym">(</span><span class="pas-ident">WebBrowser</span><span class="pas-sym">.</span><span class="pas-ident">Document</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">    </span><span class="pas-ident">Exit</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-comment">// Get IPersistStreamInit interface on document object</span>
<span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">.</span><span class="pas-ident">Document</span><span class="pas-sym">.</span><span class="pas-ident">QueryInterface</span><span class="pas-sym">(</span>
<span class="pas-space">    </span><span class="pas-ident">IPersistStreamInit</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">PersistStreamInit</span>
<span class="pas-space">  </span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-ident">S_OK</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">  </span><span class="pas-kwd">begin</span>
<span class="pas-space">    </span><span class="pas-comment">// Clear document</span>
<span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">PersistStreamInit</span><span class="pas-sym">.</span><span class="pas-ident">InitNew</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-ident">S_OK</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">    </span><span class="pas-kwd">begin</span>
<span class="pas-space">      </span><span class="pas-comment">// Get IStream interface on stream</span>
<span class="pas-space">      </span><span class="pas-ident">StreamAdapter</span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TStreamAdapter</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">Stream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-comment">// Load data from Stream into WebBrowser</span>
<span class="pas-space">      </span><span class="pas-ident">PersistStreamInit</span><span class="pas-sym">.</span><span class="pas-ident">Load</span><span class="pas-sym">(</span><span class="pas-ident">StreamAdapter</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<div class="footer">Listing 8</div>
</div>

<p>
  And this is where it gets more complicated &ndash; for the first time we
  have to mess around with the COM stuff.
</p>

<p>
  We check that the web browser control's document object is available and bail
  out if not. We then check to see if the document supports the
  <var>IPersistStreamInit</var> interface, getting a reference to the supporting
  object. <var>IPersistStreamInit</var> is used to effectively &quot;clear&quot;
  the document object (using the interface's <var>InitNew</var> method). If this
  succeeds we finally load the stream's content into the document by calling the
  <var>IPersistStreamInit.Load</var> method.
</p>

<p>
  <var>IPersistStreamInit.Load</var> accepts a stream object, but the stream
  it expects is a COM one that must support the <var>IStream</var> interface.
  Since <var>TStream</var> does not natively support this interface, we have
  to find some way to provide it. <var>TStreamAdapter</var> from Delphi's
  <code>Classes</code> unit comes to the rescue here &ndash; this object
  implements <var>IStream</var> and translates <var>IStream</var>'s method
  calls into equivalent calls onto the <var>TStream</var> object that it
  wraps. We create the needed <var>TStreamAdapter</var> object by passing a
  reference to our stream in its constructor. Finally, we pass the adpated
  stream to <var>IPersistStreamInit.Load,</var> and we're done.
</p>

<p>
  If you're wandering why we don't free <var>StreamAdapter</var> and
  <var>PersistStreamInit</var> it's because they are both interfaced objects
  and will be automatically destroyed at the end of the method by Delphi's
  built in interface reference counting. Note that even though the stream
  adapter class is freed, the underlying <var>TStream</var> object continues
  to exist, which is what we want.
</p>

<p>
  Note that the browser control interprets the encoding of the stream sets the
  document's character set accordingly. However, the character set can also be
  specified in HTML code.
</p>


<h4 id="stage1-docsave">
  Document Saving Methods
</h4>

<p>
  There are three methods that are used to save a document's code. They
  complement the three <var>LoadXXX</var> methods as follows:
</p>

<ul class="spaced">
  <li>
    <var>SaveToString</var> &ndash; Returns the document contents in a
    string.
  </li>

  <li>
    <var>SaveToFile</var> &ndash; Saves the document contents to a
    specified file.
  </li>

  <li>
    <var>SaveToStream</var> &ndash; Saves the document contents to a given
    stream.
  </li>
</ul>

<p>
  Like their <var>LoadXXX</var> counterparts, the <var>SaveToFile</var>
  and <var>SaveToString</var> methods simply map down onto
  <var>SaveToStream</var>, after creating suitable output streams. Their
  operation is quite simple and needs little explanation:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">SaveToFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">FileStream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">FileStream</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">FileName</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">fmCreate</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">try</span>
<span class="pas-space">    </span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-ident">FileStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">finally</span>
<span class="pas-space">    </span><span class="pas-ident">FileStream</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span>

<span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">SaveToString</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">StringStream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStringStream</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">StringStream</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TStringStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-str">''</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">try</span>
<span class="pas-space">    </span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-ident">StringStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">StringStream</span><span class="pas-sym">.</span><span class="pas-ident">DataString</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">finally</span>
<span class="pas-space">    </span><span class="pas-ident">StringStream</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<div class="footer">Listing 9</div>
</div>

<p>
  The only thing of note in the above methods is the use of
  <var>TStringStream</var>'s <var>DataString</var> property to read out the
  completed string after writing to the stream.
</p>

<p>
  The <var>SaveToStream</var> method follows. It's as simple as it could be,
  it simply calls <var>InternalSaveDocumentToStream</var>.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stm</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">InternalSaveDocumentToStream</span><span class="pas-sym">(</span><span class="pas-ident">Stm</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<div class="footer">Listing 10</div>
</div>

<p>
  Finally, we get to see how the protected
  <var>InternalSaveDocumentToStream</var> method is implemented. It interacts
  with the browser control to save the whole document to a stream.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">InternalSaveDocumentToStream</span><span class="pas-sym">(</span>
<span class="pas-space">  </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">StreamAdapter</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">IStream</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">PersistStreamInit</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">IPersistStreamInit</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">Assigned</span><span class="pas-sym">(</span><span class="pas-ident">WebBrowser</span><span class="pas-sym">.</span><span class="pas-ident">Document</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">    </span><span class="pas-ident">Exit</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">.</span><span class="pas-ident">Document</span><span class="pas-sym">.</span><span class="pas-ident">QueryInterface</span><span class="pas-sym">(</span>
<span class="pas-space">    </span><span class="pas-ident">IPersistStreamInit</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">PersistStreamInit</span>
<span class="pas-space">  </span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-ident">S_OK</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">  </span><span class="pas-kwd">begin</span>
<span class="pas-space">    </span><span class="pas-ident">StreamAdapter</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TStreamAdapter</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">Stream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">PersistStreamInit</span><span class="pas-sym">.</span><span class="pas-ident">Save</span><span class="pas-sym">(</span><span class="pas-ident">StreamAdapter</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">True</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<div class="footer">Listing 11</div>
</div>

<p>
  Note that, like in <var>InternalLoadDocumentFromStream</var>, we again try
  to get the web browser document's <var>IPersistStreamInit</var> interface
  and then use its <var>Save</var> method to write the document to the stream.
  We also use <var>TStreamAdapter</var> once again to provide the required
  <var>IStream</var> interface for the <var>TStream</var>.
</p>

<p>
  Note that the browser control writes the stream in the correct character set
  for the document.
</p>


<h3 id="stage2">
  Stage 2: Adding Unicode Support
</h3>

<p>
  Since the browser control supports different character encodings we need to
  add support for this to our code. For much of this we're going to rely on
  the encoding support built into Delphi 2009 and later, so get ready for some
  conditionally defined code.
</p>

<div class="boxout" style="width:40%;">
  Thanks to Mauricio Julio for suggesting some of the ideas and code used in
  this section. Particular thanks are due for the <var>GetStreamEncoding</var>
  function (see <span class="figureref">Listing 14</span> from his <a href="http://tcycomponents.sourceforge.net/" title="Off-site link" class="offsite">TcyComponents pack</a>).
</div>

<p>
  When we discussed requirements we decided we needed to be able to specify an
  encoding when writing to files and streams and when reading from a string. To
  handle this we define new overloads of the <var>SaveToStream</var>,
  <var>SaveToFile</var> and <var>LoadFromString</var> methods.
</p>

<p>
  The second requirement was to provide access to the encoding used for the
  browser control's current document.
</p>

<p>
  Taking these into account the definition of our
  <var>TWebBrowserWrapper</var> class becomes:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">type</span>
<span class="pas-space">  </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">class</span><span class="pas-sym">(</span><span class="pas-ident">TObject</span><span class="pas-sym">)</span>
<span class="pas-space">  </span><span class="pas-kwd">private</span>
<span class="pas-space">    </span><span class="pas-ident">fWebBrowser</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowser</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-comment">// wrapped control</span>
<span class="pas-space">  </span><span class="pas-kwd">protected</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">InternalLoadDocumentFromStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">InternalSaveDocumentToStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-space">    </span><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">GetDocumentEncoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$ENDIF}</span>
<span class="pas-space">  </span><span class="pas-kwd">public</span>
<span class="pas-space">    </span><span class="pas-kwd">constructor</span><span class="pas-space"> </span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowser</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">LoadFromFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">LoadFromStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">LoadFromString</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">HTML</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">LoadFromString</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">HTML</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$ENDIF}</span>
<span class="pas-space">    </span><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">NavigateToLocalFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Boolean</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">NavigateToResource</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Module</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">HMODULE</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ResName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ResType</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">nil</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">NavigateToResource</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ModuleName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ResName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">ResType</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">nil</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">NavigateToURL</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">URL</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">SaveToString</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stm</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stm</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$ENDIF}</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">SaveToFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-space">    </span><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">SaveToFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">overload</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$ENDIF}</span>
<span class="pas-space">    </span><span class="pas-kwd">property</span><span class="pas-space"> </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowser</span><span class="pas-space"> </span><span class="pas-kwd">read</span><span class="pas-space"> </span><span class="pas-ident">fWebBrowser</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-space">    </span><span class="pas-kwd">property</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-space"> </span><span class="pas-kwd">read</span><span class="pas-space"> </span><span class="pas-ident">GetDocumentEncoding</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-preproc">{$ENDIF}</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<div class="footer">Listing 12</div>
</div>

<h4 id="stage2-encoding">
  Encoding Property
</h4>

<p>
  We provide access to the browser's current document encoding via the read
  only <var>Encoding</var> property which has a read accessor method named
  <var>GetDocumentEncoding</var>, defined in the following listing.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">GetDocumentEncoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">Doc</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">IHTMLDocument2</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">DocStm</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">Assert</span><span class="pas-sym">(</span><span class="pas-ident">Assigned</span><span class="pas-sym">(</span><span class="pas-ident">WebBrowser</span><span class="pas-sym">.</span><span class="pas-ident">Document</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">.</span><span class="pas-kwd">Default</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">WebBrowser</span><span class="pas-sym">.</span><span class="pas-ident">Document</span><span class="pas-sym">.</span><span class="pas-ident">QueryInterface</span><span class="pas-sym">(</span><span class="pas-ident">IHTMLDocument2</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Doc</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-ident">S_OK</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">  </span><span class="pas-kwd">begin</span>
<span class="pas-space">    </span><span class="pas-ident">DocStm</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TMemoryStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">try</span>
<span class="pas-space">      </span><span class="pas-ident">InternalSaveDocumentToStream</span><span class="pas-sym">(</span><span class="pas-ident">DocStm</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">      </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">GetStreamEncoding</span><span class="pas-sym">(</span><span class="pas-ident">DocStm</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">finally</span>
<span class="pas-space">      </span><span class="pas-ident">DocStm</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;
</span><span class="pas-preproc">{$ENDIF}</span>
</span></pre>
<div class="footer">Listing 13</div>
</div>

<p>
  To get the document encoding we need to examine the structure of the stream
  that is generated when then the document is saved. We first record the
  default encoding to return if we can't examine the document for any reason.
  Once we have a reference to the current document in <var>Doc</var> we create
  a memory stream object and save the browser content into it by calling
  <var>InternalSaveDocumentToStream</var>. The resulting stream is then
  examined by Mauricio Julio's <var>GetStreamEncoding</var> function to get
  the encoding. <span class="figureref">Listing 14</span> shows the
  implementation <var>GetStreamEncoding</var>.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<pre class="pas-source"><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">GetStreamEncoding</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">Bytes</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TBytes</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Size</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Int64</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">Stream</span><span class="pas-sym">.</span><span class="pas-ident">Seek</span><span class="pas-sym">(</span><span class="pas-num">0</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">soFromBeginning</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Size</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Stream</span><span class="pas-sym">.</span><span class="pas-ident">Size</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">SetLength</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Stream</span><span class="pas-sym">.</span><span class="pas-ident">ReadBuffer</span><span class="pas-sym">(</span><span class="pas-ident">Pointer</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">)</span><span class="pas-sym">^</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-kwd">nil</span><span class="pas-sym">;</span><span class="pas-space">  </span><span class="pas-comment">// must initialise Result to pass as var param below</span>
<span class="pas-space">  </span><span class="pas-ident">TEncoding</span><span class="pas-sym">.</span><span class="pas-ident">GetBufferEncoding</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Result</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ENDIF}</span></pre>
<div class="footer">Listing 14</div>
</div>

<p>
  This routine simply copies the provided stream into a <var>TBytes</var>
  array then uses the <var>GetBufferEncoding</var> class method of
  <var>TEncoding</var> to determine the encoding.
</p>

<h4 id="stage2-docload">
  Revised Document Loading Methods
</h4>

<p>
  As noted already we will provide a new overloaded version of
  <var>LoadFromString</var> that takes a <var>TEncoding</var> parameter that
  determines the encoding that will be used to load the string containing the
  HTML. We will also need to re-implement the original
  <var>LoadFromString</var> method. Here's the new code:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">LoadFromString</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">HTML</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">HTMLStm</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TMemoryStream</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">Assert</span><span class="pas-sym">(</span><span class="pas-ident">Assigned</span><span class="pas-sym">(</span><span class="pas-ident">Encoding</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">HTMLStm</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TMemoryStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">try</span>
<span class="pas-space">    </span><span class="pas-ident">StringToStreamBOM</span><span class="pas-sym">(</span><span class="pas-ident">HTML</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">HTMLStm</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">HTMLStm</span><span class="pas-sym">.</span><span class="pas-ident">Position</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">LoadFromStream</span><span class="pas-sym">(</span><span class="pas-ident">HTMLStm</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">finally</span>
<span class="pas-space">    </span><span class="pas-ident">HTMLStm</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ENDIF}</span>

<span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">LoadFromString</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">HTML</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">LoadFromString</span><span class="pas-sym">(</span><span class="pas-ident">HTML</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">.</span><span class="pas-kwd">Default</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ELSE}</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">StringStream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStringStream</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">StringStream</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TStringStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">HTML</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">try</span>
<span class="pas-space">    </span><span class="pas-ident">LoadFromStream</span><span class="pas-sym">(</span><span class="pas-ident">StringStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">finally</span>
<span class="pas-space">    </span><span class="pas-ident">StringStream</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ENDIF}</span></pre>
<div class="footer">Listing 15</div>
</div>

<p>
  The first thing to note is that, on non-Unicode compilers, the original
  version of <var>LoadFromString</var> is unchanged. However the Unicode
  version now calls the new overloaded version of the method, passing the
  default encoding in the <var>Encoding</var> parameter.
</p>

<p>
  The new, Unicode only, overloaded method first writes the the string to a
  temporary memory stream, encoded according to the <var>Encoding</var>
  parameter. The stream is prefixed by any byte order mark required by the
  encoding. All this work is done by the <var>StringToStreamBOM</var> helper
  routine that is shown in <span class="figureref">Listing 16</span>. Once we
  have the stream we simply call the existing <var>LoadFromStream</var> method
  to load the stream into the document.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">StringToStreamBOM</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">S</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stm</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">Bytes</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TBytes</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Preamble</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TBytes</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">Assert</span><span class="pas-sym">(</span><span class="pas-ident">Assigned</span><span class="pas-sym">(</span><span class="pas-ident">Encoding</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Bytes</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">.</span><span class="pas-ident">GetBytes</span><span class="pas-sym">(</span><span class="pas-ident">S</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Preamble</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">.</span><span class="pas-ident">GetPreamble</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">Length</span><span class="pas-sym">(</span><span class="pas-ident">Preamble</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">    </span><span class="pas-ident">Stm</span><span class="pas-sym">.</span><span class="pas-ident">WriteBuffer</span><span class="pas-sym">(</span><span class="pas-ident">Preamble</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Length</span><span class="pas-sym">(</span><span class="pas-ident">Preamble</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Stm</span><span class="pas-sym">.</span><span class="pas-ident">WriteBuffer</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Length</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ENDIF}</span></pre>
<div class="footer">Listing 16</div>
</div>

<p>
  <var>StringToStreamBOM</var>, described above, first converts the string into
  a byte array according the required encoding. It then writes any required
  byte order mark to the stream (stored in the <var>Preamble</var> variable)
  followed by the byte array.
</p>

<h4 id="stage2-docsave">
  Revised Document Saving Methods
</h4>

<p>
  In addition to providing new overloaded versions of <var>SaveToStream</var>
  and <var>SaveToFile</var> we must re-implement <var>SaveToString</var> when
  compiling with Unicode compilers to take account of the browser document's
  encoding.
</p>

<p>
  We will first look at the revised <var>SaveToString</var> method before
  discussing the new overloaded methods. Here is the new implementation of
  <var>SaveToString</var>.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">SaveToString</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">MS</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TMemoryStream</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Bytes</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TBytes</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">MS</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TMemoryStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">try</span>
<span class="pas-space">    </span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-ident">MS</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-comment">// This stream may have a pre-amble indicating encoding</span>
<span class="pas-space">    </span><span class="pas-ident">Encoding</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">GetStreamEncoding</span><span class="pas-sym">(</span><span class="pas-ident">MS</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">MS</span><span class="pas-sym">.</span><span class="pas-ident">Position</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Length</span><span class="pas-sym">(</span><span class="pas-ident">Encoding</span><span class="pas-sym">.</span><span class="pas-ident">GetPreamble</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">SetLength</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">MS</span><span class="pas-sym">.</span><span class="pas-ident">Size</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-ident">MS</span><span class="pas-sym">.</span><span class="pas-ident">Position</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">MS</span><span class="pas-sym">.</span><span class="pas-ident">ReadBuffer</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Length</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">.</span><span class="pas-ident">GetString</span><span class="pas-sym">(</span><span class="pas-ident">Bytes</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">finally</span>
<span class="pas-space">    </span><span class="pas-ident">MS</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ELSE}</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">StringStream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStringStream</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">StringStream</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TStringStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-str">''</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">try</span>
<span class="pas-space">    </span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-ident">StringStream</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">StringStream</span><span class="pas-sym">.</span><span class="pas-ident">DataString</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">finally</span>
<span class="pas-space">    </span><span class="pas-ident">StringStream</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ENDIF}</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<div class="footer">Listing 17</div>
</div>

<p>
  Just like with <var>LoadFromString</var> the non-Unicode version of
  <var>SaveToString</var> remains unchanged.
</p>

<p>
  The Unicode version of the method writes the browser's document into a
  temporary memory stream. This is done because we need to interpret the
  output stream according to its encoding. So we call
  <var>GetStreamEncoding</var> to find the encoding used to generate the
  stream. Next we set the memory stream's position to skip over any byte order
  mark (preamble). The remainder of the stream is then copied into a byte
  array that we can pass to the <var>GetString</var> method of
  <var>TEncoding</var> which, in turn, returns the required string.
</p>

<p>
  Having disposed of the most complex method we now turn to the new overloaded
  versions of <var>SaveToFile</var> and <var>SaveToStream</var>:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">SaveToFile</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">FileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">FileStream</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">FileStream</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">FileName</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">fmCreate</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">try</span>
<span class="pas-space">    </span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-ident">FileStream</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">finally</span>
<span class="pas-space">    </span><span class="pas-ident">FileStream</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ENDIF}</span>

<span class="pas-preproc">{$IFDEF UNICODE}</span>
<span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">TWebBrowserWrapper</span><span class="pas-sym">.</span><span class="pas-ident">SaveToStream</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Stm</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TStream</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TEncoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">HTML</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">HTML</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">SaveToString</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">StringToStreamBOM</span><span class="pas-sym">(</span><span class="pas-ident">HTML</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Stm</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Encoding</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-preproc">{$ENDIF}</span></pre>
<div class="footer">Listing 18</div>
</div>

<p>
  <var>SaveToFile</var> is very similar to the version that does not take an
  <var>Encoding</var>. It creates a stream onto the file then passes the
  stream and the encoding to the overloaded version of
  <var>SaveToStream</var>.
</p>

<div class="boxout" style="width:35%;">
  If <var>Encoding</var> is the same as the document's encoding then calling
  this method is wasteful. You should call the <var>SaveToStream</var> overload
  that does not take an <var>Encoding</var> parameter instead.
</div>

<p>
  In contrast the overload of <var>SaveToStream</var> is very different. First
  it calls <var>SaveToString</var> to retrieve a string containing the
  document's content as HTML. It does this because <var>SaveToString</var>
  handles the document encoding correctly. We then save the string to the stream
  using the encoding provided in the <var>Encoding</var> parameter, prefixed by
  any required byte order mark.
</p>

<h2 id="conclusion">
  Conclusion
</h2>

<p>
  So there we have it, a class that makes <var>TWebBrowser</var> a lot more
  friendly to use when loading and saving documents.
</p>

<p>
  There is obviously a lot more we could do. A couple of things immediately
  spring to mind.
</p>

<ol class="spaced">
  <li>
    We retro-fit some of the Unicode functionality and support for non-ANSI
    encodings to the pre-Unicode compiler code. The present code when
    compiled with anything earlier than Delphi 2009 will not save document
    content to strings correctly if the document character set is not ANSI.
  </li>
  <li>
    Although this code checks input and output streams for preambles that
    identify HTML file and document encodings, it does not check any encoding
    (character sets) included explicitly in the HTML. <em>Hint:</em> check the
    <var>IHTMLDocument2.charset</var> property or the <code>&lt;meta&gt;</code>
    tag with the <code>http-equiv=&quot;Content-Type&quot;</code> attribute.
  </li>
</ol>

<p>
  I hope the code will be useful and has shared some insight into the way this
  large and often obscure control works.
</p>

<p>
  If you think I've missed anything major, please feel free to add it to the
  code. If you add anything really useful, please <a href="/contact">let me know</a>.
</p>


<h2 id="demo">
  Demo Program
</h2>

<p>
  A demo program that can be used to test and exercise the code presented here
  is available for download. The demo contains:
</p>

<ul class="spaced">
  <li>
    <code>UWebBrowserWrapper.pas</code> &ndash; contains the
    <var>TWebBrowserWrapper</var> class and helper routines presented in
    this article along with other required routines.
  </li>
  <li>
    A test application that exercises the code. Instructions for use are
    displayed in the application.
  </li>
  <li>
    Some test HTML files using various different encodings.
  </li>
</ul>

<p>
  The code was developed using Delphi 7 Professional (non-Unicode) and
  Delphi 2010 (Unicode) and tested with both those compilers and Delphi 2006.
  The code requires the <var>TWebBrowser</var> component. The demo may compile
  with earlier versions of Delphi but this has not been tested.
</p>

<div class="boxout">
  UTF-8 examples can work in non-Unicode builds if the strings contain only
  ASCII characters.
</div>

<p>
    As noted above, the code presented in this article does not work correctly
    when loading and saving in Unicode (or UTF-8) when built with a non-Unicode
    version of Delphi. These limitations are also present in the demo. Choosing
    Unicode or UTF-8 examples when loading strings into the demo will fail when
    it is built with compilers earlier than Delphi 2009.
</p>

<div class="callout">
  <div class="content">
    This source code is merely a proof of concept and is intended only to
    illustrate this article. It is not designed for use in its current form
    in finished applications. The code is provided on an &quot;AS IS&quot;
    basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
  </div>
  <div class="content">
    The code
    is open source. <code>UWebBrowserWrapper.pas</code> is licensed under
    the MPL / GPL / LGPL tri-license and other code can be re-used as
    required. See the source files for full details. If you agree to all
    this then please download the code using the following link.
  </div>

  <div class="content downloadlink">
    <a href="/download?id=art-14">Download the demo code</a>  </div>
</div>


<h2 id="acknowledgements">
  Acknowledgements
</h2>

<p>
  Several people's ideas and code samples have been used in developing this
  code. In particular I'd like to thank Christian Schwarz, Nick Hodges and
  Babur Saylan for writing some very useful tips on working with
  <var>TWebBrowser</var> at the now defunct &quot;Delphi Pool&quot;
  website. Various useful articles can also be found on the <a href="http://msdn.microsoft.com/en-gb/default.aspx" title="Off-site link" class="offsite">Microsoft Developer Network</a></p>

<p>
  Thanks are also due to Mauricio Julio for his ideas and code.
</p>
<div class="copyright">
	<p>
		This article is copyright &copy; Peter Johnson 2004-2011</p>
	<p>
		<a href="http://creativecommons.org/licenses/by-nc-sa/2.5" title="View license (off-site)" class="offsite-img"><img src="/img/ads/somerights20.gif" alt="Creative Commons License" style="width:88px;height:31px;" /></a>	</p>
	<p>
		Licensed under a <a href="http://creativecommons.org/licenses/by-nc-sa/2.5" title="View license (off-site)" class="offsite">Creative Commons License</a>.
	</p>
</div>
</div> <!-- #content -->
</div> <!-- #main -->
<div id="footer">
<div class="hide-from-css"><hr /></div> <!-- .hide-from-css -->
<a href="/copyright">Copyright</a> &copy; Peter Johnson (<a href="/background">DelphiDabbler</a>) 2002-2018</div> <!-- #footer -->
<!-- Google+ script -->
<script type="text/javascript">
  window.___gcfg = {lang: 'en-GB'};

  (function() {
    var po = document.createElement('script');
    po.type = 'text/javascript';
    po.async = true;
    po.src = 'https://apis.google.com/js/platform.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(po, s);
  })();
</script>
</div> <!-- #wrapper -->
</body>
</html>
